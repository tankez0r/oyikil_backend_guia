var pe = Object.create; var z = Object.defineProperty; var ue = Object.getOwnPropertyDescriptor; var de = Object.getOwnPropertyNames; var fe = Object.getPrototypeOf, ge = Object.prototype.hasOwnProperty; var he = (o, e) => () => (e || o((e = { exports: {} }).exports, e), e.exports); var Te = (o, e, s, n) => { if (e && typeof e == "object" || typeof e == "function") for (let t of de(e)) !ge.call(o, t) && t !== s && z(o, t, { get: () => e[t], enumerable: !(n = ue(e, t)) || n.enumerable }); return o }; var c = (o, e, s) => (s = o != null ? pe(fe(o)) : {}, Te(e || !o || !o.__esModule ? z(s, "default", { value: o, enumerable: !0 }) : s, o)); var H = he(($e, F) => { var X = { SequelizeDatabaseError: (o, e) => o.status(400).send({ mensaje: "la peticion que intentas hacer es imposible", log_message: e.message }), JsonWebTokenError: (o, e) => { o.status(498).send({ message: "el token es invalido o ha expirado, prueba iniciar sesion otra vez", log_message: e.message }) }, default_error: o => o.status(400).send({ error: "ha ocurrido un error :(, revisar log de backend para revisar posibles razones" }) }; F.exports = (o, e, s, n) => { console.log(o.name + " " + o), (X[o.name] || X.default_error)(s, o) } }); var N = c(require("./node_modules/express/index.js")); var B = require("./node_modules/express/index.js"); var b = c(require("./node_modules/sequelize/dist/index.js")); var O = c(require("./node_modules/sequelize/dist/index.js")), be = process.env.DB_HOST, ye = process.env.DB_NAME, Se = process.env.DB_USER, ke = process.env.DB_PASS, y = new O.default(ye, Se, ke, { host: be, dialect: "mariadb", pool: { max: 8, min: 0, acquire: 3e4, idle: 1e4 }, logging: !1 }); var xe = y.define("tabla_cliente", { codigo: { type: b.default.INTEGER, primaryKey: !0 }, nombre: { type: b.default.TEXT }, domicilio: { type: b.default.TEXT }, telefono: { type: b.default.STRING } }, { timestamps: !1 }), S = xe; var u = require("./node_modules/sequelize/dist/index.js"), C = (o, e, s) => { let n = Number.parseInt(o.query.page), t = Number.parseInt(o.query.size), r = 0; !Number.isNaN(n) && n > 0 && (r = n); let a = 10; !Number.isNaN(t) && t > 10 && (a = t); let m = (l, i, d) => { let { count: T, rows: _ } = l, E = i ? +i : 0, P = Math.ceil(T / d); return { cantidadPersonas: T, personas: _, paginas: P, paginaActual: E } }; S.findAndCountAll({ limit: a, offset: r * a, order: [["nombre", "asc"]] }).then(l => { let i = m(l, r, a); e.send(i) }).catch(l => s(l)) }, $ = (o, e, s) => { let { nombre: n } = o.params, t = n.split(" "), r = t[1], a = t[2]; S.findAll({ limit: 20, where: { [u.Op.or]: [{ nombre: { [u.Op.like]: `%${r}%` } }, { nombre: { [u.Op.like]: `%${r}` } }, { nombre: { [u.Op.like]: `${r}%` } }, { nombre: { [u.Op.like]: `%${a}%` } }, { nombre: { [u.Op.like]: `%${a}` } }, { nombre: { [u.Op.like]: `${a}%` } }, { nombre: { [u.Op.like]: `%${n}%` } }] } }).then(m => { m ? e.status(200).json({ data: m }) : e.status(404).send({ error: "persona inexistente" }) }).catch(m => s(m)) }, q = (o, e, s) => { let { telefono: n } = o.params; S.findAll({ limit: 20, where: { telefono: { [u.Op.like]: `%${n}%` } } }).then(t => { t ? e.status(200).json({ data: t }) : e.status(404).send({ error: "telefono inexistente" }) }).catch(t => s(t)) }; var k = (0, B.Router)(); k.get("/", C); k.get("/nombre/:nombre", $); k.get("/telefono/:telefono", q); var M = k; var me = c(H()); var f = c(require("./node_modules/sequelize/dist/index.js")); var Ne = y.define("post", { ID: { type: f.default.STRING, primaryKey: !0, allowNull: !1 }, titulo: { type: f.default.TEXT, allowNull: !1 }, subtitulo: { type: f.default.TEXT, allowNull: !1 }, imagen: { type: f.default.TEXT, allowNull: !1 }, pie_imagen: { type: f.default.TEXT }, contenido: { type: f.default.TEXT, allowNull: !1 }, fecha: { type: f.default.TEXT, allowNull: !1 } }, { timestamps: !1 }), g = Ne; var w = c(require("fs")), U = (o, e, s) => { let { titulo: n, subtitulo: t, pie_imagen: r, contenido: a } = o.body, m = o.file.path, l = new Date().toLocaleDateString(); g.create({ titulo: n, subtitulo: t, imagen: m, pie_imagen: r, contenido: a, fecha: l }, { fields: ["titulo", "subtitulo", "imagen", "pie_imagen", "contenido", "fecha"] }).then(i => { i && e.status(201).json({ message: "el post se ha creado satisfactoriamente", data: i }) }).catch(i => { s(i) }) }, L = (o, e, s) => { let n = Number.parseInt(o.query.page), t = Number.parseInt(o.query.size), r = 0; !Number.isNaN(n) && n > 0 && (r = n); let a = 4; !Number.isNaN(t) && t > 4 && (a = t); let m = (l, i, d) => { let { count: T, rows: _ } = l, E = i ? +i : 0, P = Math.ceil(T / d); return { cantidadPosts: T, post: _, paginas: P, paginaActual: E } }; g.findAndCountAll({ limit: a, offset: r * a, order: [["ID", "ASC"]] }).then(l => e.status(200).json({ data: m(l, r, a), pages: r * a })).catch(l => s(l)) }, G = (o, e, s) => { let { ID: n } = o.params; g.findOne({ where: { ID: n } }).then(t => e.status(200).json({ data: t })).catch(t => s(t)) }, K = async (o, e, s) => { let { ID: n } = o.params; await g.findAll({ where: { ID: n } }).then(t => { t && t.forEach(r => { w.unlink(r.imagen, () => { console.log(`${r._previousDataValues.imagen} fue eliminado del FS`) }) }) }), g.destroy({ where: { ID: n } }).then(t => { t > 0 ? e.status(410).json({ message: "el elemento ha sido eliminado correctamente", data: t }) : e.status(400).json({ error: "no se ha encontrado entrada" }) }).catch(t => s(t)) }, V = (o, e, s) => { let { ID: n } = o.params; console.log(o.params); let t = o.file?.path, { titulo: r, subtitulo: a, pie_imagen: m, contenido: l } = o.body; g.findAll({ attributes: ["ID", "titulo", "subtitulo", "imagen", "pie_imagen", "contenido"], where: { ID: n } }).then(i => { i.length > 0 ? (i.forEach(d => { t && w.unlink(d.imagen, () => { console.log(`${d._previousDataValues.imagen} fue eliminado del FS`) }) }), i.forEach(d => { d.update({ titulo: r, subtitulo: a, imagen: t, pie_imagen: m, contenido: l }) })) : e.status(404).send({ error: "id inexistente" }) }).then(i => e.status(202).json({ message: "el post fue editado correctamente", data: i })).catch(i => s(i)) }; var v = c(require("./node_modules/multer/index.js")), J = require("path"), _e = v.default.diskStorage({ destination: (o, e, s) => { s(null, "./imagenesposts") }, filename: (o, e, s) => { s(null, `${Date.now()}${J.extname(e.originalname)}`) } }), Ee = (o, e, s) => { let n = J.extname(e.originalname), t = /jpeg|jpg|png|gif/, r = t.test(e.mimetype), a = t.test(n); if (r && a) return s(null, !0); s("El tipo de archivos es incorrecto") }, D = (0, v.default)({ storage: _e, fileFilter: Ee }).single("imagen"); var W = c(require("./node_modules/jsonwebtoken/index.js")), Pe = (o, e, s) => { let { adminToken: n } = o.cookies, t = n ? W.default.verify(n, process.env.POST_SECRET) : null, r = { id: "admin", username: process.env.POST_USER }; try { if (t) s(); else if (!n || t.username != r.username || t.id != r.id) return e.json({ message: "la sesion actual ha expirado o el token es nulo", logedin: !1 }) } catch { s() } }, x = Pe; var Q = require("./node_modules/express/index.js"), h = (0, Q.Router)(); h.post("/", x, D, U); h.get("/", L); h.get("/:ID", G); h.delete("/:ID", x, K); h.put("/:ID", x, D, V); var Y = h; var ne = require("./node_modules/express/index.js"); var Z = require("./node_modules/jsonwebtoken/index.js"), A = require("./node_modules/cookie/index.js"), ee = async (o, e) => { let { body: s } = o, { username: n, password: t } = s, r = n.toLowerCase() === process.env.POST_USER ? n.toLowerCase() : null, a = r === null ? !1 : process.env.POST_PASS === t; try { if (!(r && a)) e.status(401).json({ message: "Las credenciales son incorrectas" }); else { let l = (0, Z.sign)({ id: "admin", username: r }, process.env.POST_SECRET), i = (0, A.serialize)("adminToken", l, { httpOnly: !0, secure: !0, sameSite: "none", domain: ".cooperativaoyikil.com.ar", maxAge: 60 * 60 * 24 * 30, path: "/" }); e.setHeader("Set-Cookie", i), e.send({ id: "admin", username: r, logedin: !0 }) } } catch (m) { e.send({ error: m }) } }, oe = async (o, e) => { try { let s = (0, A.serialize)("adminToken", "null", { httpOnly: !0, secure: !0, sameSite: "none", domain: ".cooperativaoyikil.com.ar", maxAge: -1, path: "/" }); e.setHeader("Set-Cookie", s), e.send({ logedin: !1 }) } catch (s) { console.log(s) } }; var te = c(require("./node_modules/jsonwebtoken/index.js")), we = (o, e, s) => { let { adminToken: n } = o.cookies, t = n ? te.default.verify(n, process.env.POST_SECRET) : null, r = { id: "admin", username: process.env.POST_USER }; try { if (t) e.status(202).json({ logedin: !0 }), s(); else if (!n || t.username != r.username || t.id != r.id) return e.json({ message: "la sesion actual ha expirado o el token es nulo", logedin: !1 }) } catch { s() } }, se = we; var R = (0, ne.Router)(); R.post("/", ee); R.get("/", se); var re = R; var ae = require("./node_modules/express/index.js"); var ie = (0, ae.Router)(); ie.post("/", oe); var le = ie; var ce = c(require("./node_modules/cookie-parser/index.js")), j = c(require("./node_modules/cors/lib/index.js")), p = (0, N.default)(); p.use(N.default.json()); p.use((0, ce.default)()); p.use("/imagenesposts", N.default.static("./imagenesposts")); p.use((0, j.default)({ credentials: !0, origin: ["https://martintorres-webportfolio.com.ar/", /\.martintorres-webportfolio\.com\.ar$/] })); p.options("*", (0, j.default)({ credentials: !0, origin: ["https://martintorres-webportfolio.com.ar/", /\.martintorres-webportfolio\.com\.ar$/] })); p.use("/guiatelefonica", M); p.use("/posteos", Y); p.use("/login", re); p.use("/logout", le); p.use(me.default); var I = p; var ve = () => { I.listen(3005, () => { console.log("El servidor esta listo para pedir peticiones en el puerto: " + 3005) }) }; I.get("/", (o, e) => { e.send("<h1>Bienvenido a la api de guia telefonica de oyikil</h1>") }); ve();
